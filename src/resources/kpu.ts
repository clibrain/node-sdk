// File generated from our OpenAPI spec by Stainless.

import * as Core from 'maisa/core';
import { APIResource } from 'maisa/resource';
import * as KpuAPI from 'maisa/resources/kpu';
import { type Uploadable, multipartFormRequestOptions } from 'maisa/core';

export class Kpu extends APIResource {
  /**
   * Executes the KPU in sync, sending the response when the KPU execution is done.
   */
  run(params: KpuRunParams, options?: Core.RequestOptions): Core.APIPromise<KpuRunResponse> {
    const { explain_steps, retries, ...body } = params;
    return this._client.post(
      '/v1/kpu/run',
      multipartFormRequestOptions({ query: { explain_steps, retries }, body, ...options }),
    );
  }
}

export interface KpuRunResponse {
  /**
   * Array of the intents executed by the KPU.
   */
  intents: Array<KpuRunResponse.Intent>;

  /**
   * The result of the KPU execution. The result may be invalid if none of the
   * intents were successful.
   */
  result: string;

  /**
   * Key-value of the files generated by the KPU.
   */
  downloadable_files?: Record<string, string>;
}

export namespace KpuRunResponse {
  export interface Intent {
    /**
     * Array of the steps of the intent explained in natural language. This field is an
     * ampty array if `explain_steps` param is set to `false`
     */
    explain_steps: Array<string>;

    /**
     * Intent number, starting from 0.
     */
    intent: number;

    /**
     * The result of the intent.
     */
    result: string;

    /**
     * Whether the intent was interpreted as solved by the KPU or not.
     */
    solved: boolean;

    /**
     * Key-value of the files generated by the KPU.
     */
    downloadable_files?: Record<string, string>;
  }
}

export interface KpuRunParams {
  /**
   * Body param: User text with the query or request to be commanded to the KPU.
   */
  query: string;

  /**
   * Query param: If true, the KPU will explain in natural language the steps of each
   * step of each intent. Enabling this feature can slow down the KPU execution, and
   * increase the usage metric.
   */
  explain_steps?: boolean;

  /**
   * Query param: Number of retries in case of failure. Retries are sequential, and
   * each failed intent yields a learning for the next intent. This feature is
   * experimental.
   */
  retries?: number;

  /**
   * Body param: Files to be used in the KPU execution. Files can be of any type.
   */
  file?: Array<Uploadable>;
}

export namespace Kpu {
  export import KpuRunResponse = KpuAPI.KpuRunResponse;
  export import KpuRunParams = KpuAPI.KpuRunParams;
}
